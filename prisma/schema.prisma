// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum RefundType {
  POINT
  BANK
}

enum StatusShipping {
  SHIPPED
  DELIVERED
  CANCELED
  PENDING
}

model User {
  id                Int                @id @default(autoincrement())
  role              Role               @default(USER)
  name              String?
  email             String             @unique
  phone             String?
  password          String
  identityNumber    String?
  branchNumber      String?
  refund            RefundType?
  point             Int                @default(0)
  shippingAddresses Shipping_Address[]
  products          Product[]
  favorites         Favorite[]
  user_search       User_Search[]
  Cart              Cart?
  Order             Order[]
}

model Shipping_Address {
  id             Int     @id @default(autoincrement())
  firstName      String  @map("first_name")
  lastName       String  @map("last_name")
  phone          String
  email          String?
  identityNumber String? @map("identity_number")
  company        String?
  branch         String?
  address        String
  apartment      String?
  postalCode     String  @map("postal_code")
  province       String
  district       String
  subDistrict    String  @map("sub_district")
  isMainAddress  Boolean @map("is_main_address")
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId         Int     @map("user_id")

  @@map("shipping_address")
}

// Add by my mine homework 240124
model Search {
  id    Int    @id @default(autoincrement())
  name  String
  count Int    @default(0)
}

model User_Search {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int  @map("user_id")

  @@map("user_search")
}

// 

model Favorite {
  id               Int                @id @default(autoincrement())
  name             String
  user             User               @relation(fields: [userId], references: [id])
  userId           Int                @map("user_id")
  favoriteProducts Favorite_Product[]
}

model Favorite_Product {
  id         Int      @id @default(autoincrement())
  favorite   Favorite @relation(fields: [favoriteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  favoriteId Int      @map("favorite_id")
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId  Int      @map("product_id")

  @@map("favorite_product")
}

model Product {
  id                Int                 @id @default(autoincrement())
  stock             Int                 @default(0)
  unit              Int                 @default(1)
  priceHigh         Int                 @map("price_height")
  minPriceHigh      Int                 @map("min_price_high")
  priceMedium       Int?                @map("price_medium")
  minPriceMedium    Int?                @map("min_price_medium")
  priceLow          Int?                @map("price_low")
  minPriceLow       Int?                @map("min_price_low")
  detail            String
  width             Decimal
  heigh             Decimal
  depth             Decimal
  weight            Decimal
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId            Int                 @map("user_id")
  category          Category            @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId        Int                 @map("category_id")
  brand             Brand               @relation(fields: [brandId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  brandId           Int                 @map("brand_id")
  favoriteProducts  Favorite_Product[]
  Cart_Product      Cart_Product[]
  Order_Product     Order_Product[]
  Product_Img       Product_Img[]
  Product_Promotion Product_Promotion[]
}

// Product image for hw 240124
model Product_Img {
  id        Int     @id @default(autoincrement())
  url       String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")

  @@map("product_img")
}

// Cart for homework 240124
model Cart {
  id                  Int            @id @default(autoincrement())
  totalBeforeDiscount Float
  discount            Float          @default(0)
  deliveryFee         Float          @default(0)
  total               Float
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int            @unique @map("user_id")
  Cart_Product        Cart_Product[]
}

model Cart_Product {
  id        Int     @id @default(autoincrement())
  quantity  Int     @default(0)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cartId    Int     @map("cart_id")
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId Int     @map("product_id")

  @@map("cart_product")
}

// Order for homework 240124
model Order {
  id                  Int             @id @default(autoincrement())
  totalBeforeDiscount Float
  discount            Float           @default(0)
  deliveryFee         Float           @default(0)
  total               Float
  createAt            DateTime        @default(now())
  user                User            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId              Int             @map("user_id")
  Order_Product       Order_Product[]
  Status              Status[]
}

model Order_Product {
  id       Int     @id @default(autoincrement())
  quantity Int     @default(0)
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  orderId  Int     @map("order_id")
  product  Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  productId Int @map("product_id")
}

model Status {
  id        Int      @id @default(autoincrement())
  status    StatusShipping @default(PENDING)
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int      @map("order_id")
}

// add product for hw 240124
model Category {
  id      Int       @id @default(autoincrement())
  name    String
  count   Int
  Product Product[]
}

model Brand {
  id      Int       @id @default(autoincrement())
  name    String
  count   Int
  Product Product[]
}

// Product Promotion for hw240124
model Promotion {
  id                Int                 @id @default(autoincrement())
  name              String
  bannerUrl         String?
  discount          Float?
  point             Float?
  Product_Promotion Product_Promotion[]
}

model Product_Promotion {
  id          Int       @id @default(autoincrement())
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  productId   Int       @map("product_id")
  promotion   Promotion @relation(fields: [promotionId], references: [id])
  promotionId Int       @map("promotion_id")
}
